# browser size
serenity.browser.height=1024
serenity.browser.width=1280

# Run the Chrome browser in a headless environment.
#chrome.switches=--headless--window-size=1920,1080
webdriver.chrome.driver = chromedriver.exe

# implicit waiting
webdriver.wait.for.timeout = 20000
webdriver.timeouts.implicitlywait = 10000

## Console settings
# Enabling or disabling colours in console output
serenity.console.colors = true

# Set this property to provide more detailed logging of WebElementFacade steps when tests are run
serenity.verbose.steps=true

# Property for providing level of serenity actions, results, etc.
# QUIET = no logging
# NORMAL = log the start and end of tests
# VERBOSE (default) = log the start and end of tests and test steps, default value
serenity.logging = NORMAL

## Reports settings
# Encoding used to generate the CSV exports
serenity.report.encoding=utf-8

# Set how often should serenity take screenshots
# FOR_EACH_ACTION = Saves a screenshot at every web element action (like click(), typeAndEnter(), type(), etc.)
# BEFORE_AND_AFTER_EACH_STEP = Saves a screenshot before and after every step
# AFTER_EACH_STEP = Saves a screenshot after every step
# FOR_FAILURES = Saves screenshots only for failing steps
# DISABLED = Doesn't save screenshots for any steps
serenity.take.screenshots = FOR_FAILURES

## Tests settings
# Data source. System property used in @UseTestDataFrom("$DATADIR/simple-data.csv")
serenity.data.dir = ""

# The root package for the tests in a given project. If provided, Serenity will use this as the root package when
# determining the capabilities associated with a test. Tl;dr: required for bdd. Have some alternatives, check reference.
serenity.test.root = features

# Use the enable.markdown property to define where you want Markdown code to be rendered (you can put multiple values separated by commas):
#- story: in story titles
#- narrative: in story narrative texts
#- step: in step descriptions
enable.markdown = story, narrative, step